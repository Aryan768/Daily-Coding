#include<iostream>
#include<queue>
#include<vector>

using namespace std;
template<typename T>

class BinaryTreeNode{
    public:
    T data;
    BinaryTreeNode<int>*left;
    BinaryTreeNode<int>*right;
    BinaryTreeNode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~BinaryTreeNode()
    {
        delete left;
        delete right;
    }
};

BinaryTreeNode<int>*takeInputLevelWise()
{
    int rootData;
    cout<<"Enter root data: ";
    cin>>rootData;
    if(rootData==-1)
    {
        return NULL;
    }
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0)
     {
        BinaryTreeNode<int>*front= pendingNodes.front();
        pendingNodes.pop();
         cout<<"Enter left child of "<<front->data<<endl;
         int leftChildData;
         cin>>leftChildData;
         if(leftChildData!=-1)
          {
              BinaryTreeNode<int>*child=new BinaryTreeNode<int>(leftChildData);
              front->left=child;
              pendingNodes.push(child);
              
          }
        
        cout<<"Enter right child of "<<front->data<<endl;
         int rightChildData;
         cin>>rightChildData;
         if(rightChildData!=-1)
          {
              BinaryTreeNode<int>*child=new BinaryTreeNode<int>(rightChildData);
              front->right=child;
              pendingNodes.push(child);
              
          }  
     }
     return root;
}
void printLevelWise(BinaryTreeNode<int>*root){
    if(root==NULL)
     {
         return;
     }
     queue<BinaryTreeNode<int>*>pendingNodes;
     pendingNodes.push(root);
     while(pendingNodes.size()!=0)
       {
           BinaryTreeNode<int>*front=pendingNodes.front();
           pendingNodes.pop();
           cout<<front->data<<":";
           if(front->left!=NULL)
              {
                  cout<<"L"<<front->left->data;
                  pendingNodes.push(front->left);
              }
              
              if(front->right!=NULL)
              {
                  cout<<"R"<<front->right->data;
                  pendingNodes.push(front->right);
              }
           cout<<endl;
       }
}
BinaryTreeNode<int>*buildTreeHelper(int*in,int*pre,int inS,int inE,int preS,int preE)
       {
           if(inS>inE)
             {
                 return NULL;
             }
        
        int rootData=pre[preS];
     int   rootIndex=-1;
        for(int i=inS;i<=inE;i++)
           {
               if(in[i]==rootData)
                  {
                      rootIndex=i;
                      break;
                  }
           }
        int lInS=inS;
        int lInE=rootIndex-1;
        int lPreS=preS+1;
        int lPreE=lInE-lInS+lPreS;
        int rPreS=lPreE+1;
        int rPreE=preE;
        int rInS=rootIndex+1;
        int rInE=inE;
        BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
        root->left=buildTreeHelper(in,pre,lInS,lInE,lPreS,lPreE);
        root->right=buildTreeHelper(in,pre,rInS,rInE,rPreS,rPreE);
        return root;
       }
     BinaryTreeNode<int>*buildTree(int*in,int*pre,int size)
    {
     return buildTreeHelper(in,pre,0,size-1,0,size-1);
     }

int main()
{
    BinaryTreeNode<int>*root=takeInputLevelWise();
    printLevelWise(root);
    int in[]={4,2,5,1,8,6,9,3,7};
    int pre[]={1,2,4,5,3,6,8,9,7};
    BinaryTreeNode<int>*root1=buildTree(in,pre,9);
    printLevelWise(root1);
}










