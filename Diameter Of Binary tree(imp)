#include<iostream>
#include<queue>
#include<vector>

using namespace std;
template<typename T>

class BinaryTreeNode{
    public:
    T data;
    BinaryTreeNode<int>*left;
    BinaryTreeNode<int>*right;
    BinaryTreeNode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~BinaryTreeNode()
    {
        delete left;
        delete right;
    }
};

BinaryTreeNode<int>*takeInputLevelWise()
{
    int rootData;
    cout<<"Enter root data: ";
    cin>>rootData;
    if(rootData==-1)
    {
        return NULL;
    }
    BinaryTreeNode<int>*root=new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0)
     {
        BinaryTreeNode<int>*front= pendingNodes.front();
        pendingNodes.pop();
         cout<<"Enter left child of "<<front->data<<endl;
         int leftChildData;
         cin>>leftChildData;
         if(leftChildData!=-1)
          {
              BinaryTreeNode<int>*child=new BinaryTreeNode<int>(leftChildData);
              front->left=child;
              pendingNodes.push(child);
              
          }
        
        cout<<"Enter right child of "<<front->data<<endl;
         int rightChildData;
         cin>>rightChildData;
         if(rightChildData!=-1)
          {
              BinaryTreeNode<int>*child=new BinaryTreeNode<int>(rightChildData);
              front->right=child;
              pendingNodes.push(child);
              
          }  
     }
     return root;
}
void printLevelWise(BinaryTreeNode<int>*root){
    if(root==NULL)
     {
         return;
     }
     queue<BinaryTreeNode<int>*>pendingNodes;
     pendingNodes.push(root);
     while(pendingNodes.size()!=0)
       {
           BinaryTreeNode<int>*front=pendingNodes.front();
           pendingNodes.pop();
           cout<<front->data<<":";
           if(front->left!=NULL)
              {
                  cout<<"L"<<front->left->data;
                  pendingNodes.push(front->left);
              }
              
              if(front->right!=NULL)
              {
                  cout<<"R"<<front->right->data;
                  pendingNodes.push(front->right);
              }
           cout<<endl;
       }
}

pair<int,int>heightDiameter(BinaryTreeNode<int>*root)
  {
      if(root==NULL)
       {
           pair<int,int> p;
           p.first=0;
           p.second=0;
           return p;
       }
       
       pair<int,int>leftAns=heightDiameter(root->left);
       pair<int,int>rightAns=heightDiameter(root->right);
       int ld=leftAns.second;
       int lh=leftAns.first;
       int rd=rightAns.second;
       int rh=rightAns.first;
       
       int height=1+max(lh,rh);
       int diameter=max(lh+rh,max(ld,rd));
       pair<int,int>p;
       p.first=height;
       p.second=diameter;
       return p;
       
  }

int main()
{
    BinaryTreeNode<int>*root=takeInputLevelWise();
    printLevelWise(root);
    cout<<endl;
    pair<int,int> p=heightDiameter(root);
    cout<<"Height:"<<p.first<<endl;
    cout<<"Diameter:"<<p.second;
    
}










