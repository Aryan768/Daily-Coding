#include <iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
int NumLeaf=0;
template<typename T>
class TreeNode{
    public:
    T data;
    vector <TreeNode<T>*>children;
    TreeNode(T data)
    {
        this->data=data;
    }
    
};

TreeNode<int>*takeInputLevelWise(){
    int rootData;
    cout<<"Enter Data: "<<endl;
    cin>>rootData;
    TreeNode<int>*root=new TreeNode<int>(rootData);
    queue<TreeNode<int>*>pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0)
    {
        TreeNode<int>*front=pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter number of children of "<<front->data<<endl;
        int numChild;
        cin>>numChild;
        for(int i=0;i<numChild;i++)//1
        {
            int childData;
            cout<<"Enter "<<i+1<<"th child of "<<front->data<<" ";
            cin>>childData;
            TreeNode<int>*child=new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
            
        }
    }
    return root;
}
        void printTree(TreeNode<int>*root)
        {
          if(root==NULL)
            return ;
         cout<<root->data<<":";
         for(int i=0;i<root->children.size();i++)
           {
               cout<<root->children[i]->data<<",";
           }
          cout<<endl;
          for(int i=0;i<root->children.size();i++)
          {
              printTree(root->children[i]);
          }
        }
        TreeNode<int>*SecondMax(TreeNode<int>*root)
                {
                    if(root==NULL)
                    {
                        return NULL;
                    }
                    TreeNode<int>*max=root;
                    TreeNode<int>*secondmax=root->children[0];
                    if(root->children.size()==0)
                    {
                       return NULL;
                    
                    }
                    if(max->data<secondmax->data)
                    {
                        max=root->children[0];
                        secondmax=root;
                    }
                   
                    queue<TreeNode<int>*>pendingNodes2;
                    pendingNodes2.push(root);
                    while(pendingNodes2.size()!=0)
                     {
                         TreeNode<int>*front2=pendingNodes2.front();
                         pendingNodes2.pop();
                         for(int i=0;i<front2->children.size();i++)
                            { pendingNodes2.push(front2->children[i]);
                                if(front2->children[i]->data>secondmax->data)
                                  {
                                      if(front2->children[i]->data>max->data)
                                        {
                                            secondmax=max;
                                            
                                            max=front2->children[i];
                                        }
                                  
                                  else{
                                      secondmax=front2->children[i];
                                       }
                                  }
                         
                             }
                     }
                     return secondmax;
                    
                }
            

int main()
{
    TreeNode<int>*root = takeInputLevelWise();
    printTree(root);
     TreeNode<int>*secondMax=SecondMax(root);
 cout<<"Second max: "<<secondMax->data;
 return 0;

 
}
